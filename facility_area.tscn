[gd_scene load_steps=5 format=3 uid="uid://cd8kii0ilifce"]

[ext_resource type="PackedScene" uid="uid://bkukqgks77m8g" path="res://facility_object.tscn" id="1_m45hq"]
[ext_resource type="PackedScene" uid="uid://bwf6gyjsnbg5q" path="res://placement_area.tscn" id="2_tjeg7"]
[ext_resource type="Texture2D" uid="uid://056a7lgtpeke" path="res://icon.svg" id="3_wljjm"]

[sub_resource type="GDScript" id="GDScript_7hp3x"]
script/source = "extends Area

var currently_clicked_object = null

@export var facility_object_scene:PackedScene

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass
	#$AutoSellArea2D.set_up_new_placement_area(GlobalReference.placement_area_types.autosell, 10, false, Vector2(960,150), Vector2(1800,210))
	#$FacilityArea2D.set_up_new_placement_area(GlobalReference.placement_area_types.facility, 10, false, Vector2(960,400), Vector2(1800, 300))
	#placement_areas.append($AutoSellArea2D)
	#placement_areas.append($FacilityArea2D)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	if currently_clicked_object != null:
		draw_placement_ghost(currently_clicked_object)
	else:
		$PlacementGhost.visible = false

func draw_placement_ghost(moving_object:Node2D):
	if $AutoSellArea2D.check_for_selected_ship_overlap(moving_object) == true && $AutoSellArea2D.check_if_enough_open_space(moving_object) == true:
		$PlacementGhost.global_position = $AutoSellArea2D.get_closest_open_spot_for_ship(moving_object).global_position
		$PlacementGhost.texture = moving_object.get_my_sprite_texture()
		$PlacementGhost.visible = true
	elif $FacilityArea2D.check_for_selected_ship_overlap(moving_object) == true && $FacilityArea2D.check_if_enough_open_space(moving_object) == true:
		$PlacementGhost.global_position = $FacilityArea2D.get_closest_open_spot_for_ship(moving_object).global_position
		$PlacementGhost.texture = moving_object.get_my_sprite_texture()
		$PlacementGhost.visible = true
	else:
		if moving_object.global_position.distance_to($FacilityArea2D.global_position) <= moving_object.global_position.distance_to($AutoSellArea2D.global_position) && $FacilityArea2D.check_if_enough_open_space(moving_object) == true:
			$PlacementGhost.global_position = $FacilityArea2D.get_closest_open_spot_for_ship(moving_object).global_position
			$PlacementGhost.texture = moving_object.get_my_sprite_texture()
			$PlacementGhost.visible = true
		elif moving_object.global_position.distance_to($AutoSellArea2D.global_position) < moving_object.global_position.distance_to($FacilityArea2D.global_position) && $AutoSellArea2D.check_if_enough_open_space(moving_object) == true:
			$PlacementGhost.global_position = $AutoSellArea2D.get_closest_open_spot_for_ship(moving_object).global_position
			$PlacementGhost.texture = moving_object.get_my_sprite_texture()
			$PlacementGhost.visible = true
		else:
			print(\"no spots open anywhere, placement ghost cannot be placed\")

#func get_closest_open_spot_for_object(object_looking_for_spot:Node2D, area_to_look_in_first:Dictionary):
	#var possible_spots = []
	#for each_spot in area_to_look_in_first.keys():
		#if area_to_look_in_first[each_spot] != null:
			#pass
		#else:
			#possible_spots.append(each_spot)
	#if possible_spots.is_empty() == true:
		#return object_looking_for_spot
	#else:
		#var closest_spot = possible_spots[0]
		#for each_spot in possible_spots:
			#if each_spot.global_position.distance_to(object_looking_for_spot.global_position) < closest_spot.global_position.distance_to(object_looking_for_spot.global_position):
				#closest_spot = each_spot
		#return closest_spot
		
func place_object_in_autosell_area(object_to_place:Node2D):
	if $AutoSellArea2D.check_if_enough_open_space(object_to_place) == true:
		var spot_to_move_to = $AutoSellArea2D.get_closest_open_spot_for_ship(object_to_place)
		$AutoSellArea2D.add_object_to_spot(object_to_place, spot_to_move_to)
		object_to_place.global_position = spot_to_move_to.global_position
	else:
		print(\"not enough space in waiting area, object cannot be placed\")
		object_to_place.deconstruct()

func get_spot_by_vector(vector_input:Vector2):
	var placement_spot
	if $FacilityArea2D.check_if_vector_is_a_spot_here(vector_input) == true:
		placement_spot = $FacilityArea2D.get_spot_by_vector(vector_input)
		return [placement_spot, $FacilityArea2D]
	elif $AutoSellArea2D.check_if_vector_is_a_spot_here(vector_input) == true:
		placement_spot = $AutoSellArea2D.get_spot_by_vector(vector_input)
		return [placement_spot, $AutoSellArea2D]
	print(\"spot not found on any placement areas, likely invalid:\" + str(vector_input))
	assert(false)

func _on_waiting_area_2d_area_entered(area: Area2D) -> void:
	pass

func _on_child_entered_tree(node: Node) -> void:
	if node.get_parent() == self:
		if \"effects\" in node:
			#node.ship_clicked.connect(_on_ship_clicked)
			#node.ship_released.connect(_on_ship_released)
			place_object_in_autosell_area(node)
 #
func _on_button_pressed() -> void:
	var new_object = facility_object_scene.instantiate()
	var object_type_roll = rand_num.randi_range(0,1)
	var object_type
	if object_type_roll == 0:
		object_type = GlobalReference.object_types.test_small
	else:
		object_type = GlobalReference.object_types.test_medium
	new_object.first_time_setup(object_type)
	add_child(new_object)
#
#func _on_ship_clicked(clicked_ship:Node2D):
	#for each_spot in spots_n_objects_in_autosell_area.keys():
		#if spots_n_objects_in_autosell_area[each_spot] == clicked_ship:
			#spots_n_objects_in_autosell_area[each_spot] = null
	#currently_clicked_object = clicked_ship

#func _on_ship_released(released_ship:Node2D):
	#currently_clicked_object = null
	##need some logic below to avoid some weird interactions if the ghost moves during placement or smth
	#released_ship.global_position = $PlacementGhost.global_position #place it in the right spot
	#var spot_to_add_ship_to = get_spot_by_vector(released_ship.global_position)
	#if spot_to_add_ship_to[1] != null:
		#spot_to_add_ship_to[1][spot_to_add_ship_to[0]] = released_ship
		
		
"

[node name="FacilityArea" type="Node2D"]
position = Vector2(3, 3)
script = SubResource("GDScript_7hp3x")
facility_object_scene = ExtResource("1_m45hq")

[node name="AutoSellArea2D" parent="." instance=ExtResource("2_tjeg7")]
position = Vector2(776, 377)

[node name="FacilityArea2D" parent="." instance=ExtResource("2_tjeg7")]
position = Vector2(776, 600)

[node name="Button" type="Button" parent="."]
offset_left = 1636.0
offset_top = 80.0
offset_right = 1823.0
offset_bottom = 144.0
text = "Spawn new facility"
metadata/_edit_use_anchors_ = true

[node name="PlacementGhost" type="Sprite2D" parent="."]
visible = false
modulate = Color(1, 1, 1, 0.368627)
texture = ExtResource("3_wljjm")
centered = false

[connection signal="child_entered_tree" from="." to="." method="_on_child_entered_tree"]
[connection signal="pressed" from="Button" to="." method="_on_button_pressed"]
